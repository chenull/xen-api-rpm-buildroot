commit 702911496fd7be9b90988828807e72573d0e9c22
Author: Jim Fehlig <jfehlig@suse.com>
Date:   Mon Jan 21 10:36:03 2013 -0700

    libxl: Domain event handler improvements

    Since libxl provides the domain ID in the event handler callback,
    find the domain object based on the ID.  This approach prevents
    processing the callback on a domain that has already been reaped.

    Also, similar to the xl implementation, ignore the SUSPEND shutdown
    reason.  By calling libxl_domain_suspend(), we know a shutdown
    event with SUSPEND reason will be generated, but it can be safely
    ignored since any subsequent cleanup will be done by the callers.

diff -r 0a9baeb4e58b src/libxl/libxl_driver.c
--- a/src/libxl/libxl_driver.c	Mon Jan 21 10:32:34 2013 -0700
+++ b/src/libxl/libxl_driver.c	Wed May 01 15:26:49 2013 +0100
@@ -563,26 +563,35 @@ libxlVmReap(libxlDriverPrivatePtr driver
 /*
  * Handle previously registered event notification from libxenlight
  */
-static void libxlEventHandler(void *data, const libxl_event *event)
+static void libxlEventHandler(void *data ATTRIBUTE_UNUSED, const libxl_event *event)
 {
     libxlDriverPrivatePtr driver = libxl_driver;
-    virDomainObjPtr vm = data;
+    virDomainObjPtr vm = NULL;
     virDomainEventPtr dom_event = NULL;
 
-    libxlDriverLock(driver);
-    virDomainObjLock(vm);
-    libxlDriverUnlock(driver);
+    libxl_shutdown_reason xl_reason = event->u.domain_shutdown.shutdown_reason;
 
     if (event->type == LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN) {
         virDomainShutoffReason reason;
 
-        if (event->domid != vm->def->id)
+        /*
+         * Similar to the xl implementation, ignore SUSPEND.  Any actions needed
+         * after calling libxl_domain_suspend() are handled by it's callers.
+         */
+        if (xl_reason == LIBXL_SHUTDOWN_REASON_SUSPEND)
             goto cleanup;
 
-        switch (event->u.domain_shutdown.shutdown_reason) {
+        libxlDriverLock(driver);
+        vm = virDomainFindByID(&driver->domains, event->domid);
+        libxlDriverUnlock(driver);
+
+        if (!vm)
+            goto cleanup;
+
+        switch (xl_reason) {
             case LIBXL_SHUTDOWN_REASON_POWEROFF:
             case LIBXL_SHUTDOWN_REASON_CRASH:
-                if (event->u.domain_shutdown.shutdown_reason == LIBXL_SHUTDOWN_REASON_CRASH) {
+                if (xl_reason == LIBXL_SHUTDOWN_REASON_CRASH) {
                     dom_event = virDomainEventNewFromObj(vm,
                                               VIR_DOMAIN_EVENT_STOPPED,
                                               VIR_DOMAIN_EVENT_STOPPED_CRASHED);
@@ -601,7 +610,7 @@ static void libxlEventHandler(void *data
                 libxlVmStart(driver, vm, 0, -1);
                 break;
             default:
-                VIR_INFO("Unhandled shutdown_reason %d", event->u.domain_shutdown.shutdown_reason);
+                VIR_INFO("Unhandled shutdown_reason %d", xl_reason);
                 break;
         }
     }
