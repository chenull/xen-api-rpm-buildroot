commit 04172610c0630201626b837a05722d40bdae2aa6
Author: Jim Fehlig <jfehlig@suse.com>
Date:   Mon Jan 21 09:59:28 2013 -0700

    libxl: Fix handling of timeouts

    xen-unstable changeset 26469 makes changes wrt modifying and deregistering
    timeouts.

    First, timeout modify callbacks will only be invoked with an
    abs_t of {0,0}, i.e. make the timeout fire immediately.  Prior to this
    commit, timeout modify callbacks were never invoked.

    Second, timeout deregister hooks will no longer be called.

    This patch makes changes in the libvirt libxl driver that should be
    compatible before and after changeset 26469.

    While at it, fix a potential overflow in the timeout register callback.

diff -r f9a0d4f759cd src/libxl/libxl_driver.c
--- a/src/libxl/libxl_driver.c	Wed May 01 14:18:19 2013 +0100
+++ b/src/libxl/libxl_driver.c	Wed May 01 14:34:34 2013 +0100
@@ -184,7 +184,15 @@ static void libxlTimerCallback(int timer
 {
     struct libxlOSEventHookTimerInfo *timer_info = timer_v;
 
+    /*
+     * libxl expects the event to be deregistered when calling
+     * libxl_osevent_occurred_timeout, but we dont want the event info
+     * destroyed.  Disable the timeout and only remove it after returning
+     * from libxl.
+     */
+    virEventUpdateTimeout(timer_info->id, -1);
     libxl_osevent_occurred_timeout(timer_info->priv->ctx, timer_info->xl_priv);
+    virEventRemoveTimeout(timer_info->id);
 }
 
 static void libxlTimerInfoFree(void* obj)
@@ -198,6 +206,8 @@ static int libxlTimeoutRegisterEventHook
                                          void *for_libxl)
 {
     struct timeval now;
+    struct timeval res;
+    static struct timeval zero;
     struct libxlOSEventHookTimerInfo *timer_info;
     int timeout, timer_id;
 
@@ -207,8 +217,15 @@ static int libxlTimeoutRegisterEventHook
     }
 
     gettimeofday(&now, NULL);
-    timeout = (abs_t.tv_usec - now.tv_usec) / 1000;
-    timeout += (abs_t.tv_sec - now.tv_sec) * 1000;
+    timersub(&abs_t, &now, &res);
+    /* Ensure timeout is not overflowed */
+    if (timercmp(&res, &zero, <)) {
+        timeout = 0;
+    } else if (res.tv_sec > INT_MAX / 1000) {
+        timeout = INT_MAX;
+    } else {
+        timeout = res.tv_sec * 1000 + (res.tv_usec + 999) / 1000;
+    }
     timer_id = virEventAddTimeout(timeout, libxlTimerCallback,
                                   timer_info, libxlTimerInfoFree);
     if (timer_id < 0) {
@@ -223,18 +240,24 @@ static int libxlTimeoutRegisterEventHook
     return 0;
 }
 
+/*
+ * Note:  There are two changes wrt timeouts starting with xen-unstable
+ * changeset 26469:
+ *
+ * 1. Timeout modify callbacks will only be invoked with an abs_t of {0,0},
+ * i.e. make the timeout fire immediately.  Prior to this commit, timeout
+ * modify callbacks were never invoked.
+ *
+ * 2. Timeout deregister hooks will no longer be called.
+ */
 static int libxlTimeoutModifyEventHook(void *priv ATTRIBUTE_UNUSED,
                                        void **hndp,
-                                       struct timeval abs_t)
+                                       struct timeval abs_t ATTRIBUTE_UNUSED)
 {
-    struct timeval now;
-    int timeout;
     struct libxlOSEventHookTimerInfo *timer_info = *hndp;
 
-    gettimeofday(&now, NULL);
-    timeout = (abs_t.tv_usec - now.tv_usec) / 1000;
-    timeout += (abs_t.tv_sec - now.tv_sec) * 1000;
-    virEventUpdateTimeout(timer_info->id, timeout);
+    /* Make the timeout fire */
+    virEventUpdateTimeout(timer_info->id, 0);
     return 0;
 }
 
